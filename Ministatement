package com.mycompany.mainpanel;

import javax.swing.*;
import java.awt.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.temporal.ChronoField;
import java.util.List;
import java.util.stream.Collectors;

public class MiniStatement extends JDialog {
    private String accountNumber;

    public MiniStatement(Frame owner, String accountNumber) {
        super(owner, "Mini Statement", true);
        this.accountNumber = accountNumber;

        setSize(500, 300);
        setLayout(new BorderLayout());

        Color sunsetPurple = new Color(100, 50, 90);
        getContentPane().setBackground(sunsetPurple);

        JLabel headerLabel = new JLabel("Mini Statement for A/C: ****" +
                accountNumber.substring(accountNumber.length() - 4));
        headerLabel.setFont(new Font("Arial", Font.BOLD, 16));
        headerLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        headerLabel.setForeground(Color.WHITE);
        headerLabel.setBackground(sunsetPurple);
        headerLabel.setOpaque(true);
        add(headerLabel, BorderLayout.NORTH);

        JTextArea statementArea = new JTextArea();
        statementArea.setEditable(false);
        statementArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        statementArea.setBackground(sunsetPurple);
        statementArea.setForeground(Color.WHITE);
        statementArea.setCaretColor(Color.WHITE);

        List<TransactionStorage.Transaction> transactions = getLastTransactions(accountNumber, 5);

        if (transactions.isEmpty()) {
            statementArea.setText("No transactions found.");
        } else {
            statementArea.append(String.format("%-20s %-15s %-10s %-10s\n",
                    "Date/Time", "Type", "Amount", "Account"));
            statementArea.append("-------------------------------------------------------------\n");
            for (TransactionStorage.Transaction tx : transactions) {
                statementArea.append(formatTransaction(tx) + "\n");
            }
        }

        JScrollPane scrollPane = new JScrollPane(statementArea);
        scrollPane.getViewport().setBackground(sunsetPurple);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        add(scrollPane, BorderLayout.CENTER);

        setLocationRelativeTo(owner);
        setVisible(true);
    }

    private List<TransactionStorage.Transaction> getLastTransactions(String accNum, int limit) {
        return TransactionStorage.getTransactions()
                .stream()
                .filter(tx -> tx.accountNumber.equals(accNum))
                .sorted((a, b) -> b.dateTime.compareTo(a.dateTime))
                .limit(limit)
                .collect(Collectors.toList());
    }

    private static final DateTimeFormatter FLEX_INPUT =
            new DateTimeFormatterBuilder()
                    .appendPattern("yyyy-MM-dd")
                    .optionalStart().appendLiteral('T').optionalEnd()
                    .optionalStart().appendLiteral(' ').optionalEnd()
                    .appendPattern("HH:mm:ss")
                    .optionalStart()
                    .appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true)
                    .optionalEnd()
                    .toFormatter();

    private static final DateTimeFormatter OUTPUT =
            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    private String formatTransaction(TransactionStorage.Transaction tx) {
        try {
            LocalDateTime parsedDateTime = LocalDateTime.parse(tx.dateTime, FLEX_INPUT);
            String formattedDateTime = parsedDateTime.format(OUTPUT);
            return String.format("%-20s %-15s %-10.2f %-10s",
                    formattedDateTime, tx.type, tx.amount,
                    "****" + tx.accountNumber.substring(tx.accountNumber.length() - 4));
        } catch (Exception e) {
            String fallback = tx.dateTime.replace('T', ' ');
            int dot = fallback.indexOf('.');
            if (dot > 0) fallback = fallback.substring(0, dot);
            return String.format("%-20s %-15s %-10.2f %-10s",
                    fallback, tx.type, tx.amount,
                    "****" + tx.accountNumber.substring(tx.accountNumber.length() - 4));
        }
    }
}
